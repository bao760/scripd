-- SDVT SAB Safe Scheduler + SafeMove (NO auto tool activate / NO auto click)
-- Uses PathfindingService + Humanoid:MoveTo for navigation
-- UI: Rayfield (sirius.menu). Scheduler uses local machine time (os.date)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local player = Players.LocalPlayer

-- Window
local Window = Rayfield:CreateWindow({
    Name = "SDVT SAB - Safe Scheduler",
    LoadingTitle = "SDVT Hub",
    LoadingSubtitle = "SafeMove Scheduler"
})

-- Tabs
local InfoTab = Window:CreateTab("üìú Info", 4483362458)
local MainTab = Window:CreateTab("üß≠ Main", 4483362458)
local EventTab = Window:CreateTab("üéÉ Event", 4483362458)
local AutoTab = Window:CreateTab("‚è∞ Scheduler", 4483362458)

-- Info
InfoTab:CreateSection("üë§ Player")
InfoTab:CreateLabel("Name: "..tostring(player.Name))
InfoTab:CreateLabel("UserId: "..tostring(player.UserId))
InfoTab:CreateLabel("GameId: "..tostring(game.PlaceId))

-- Main: copy coord
MainTab:CreateSection("üìå Coordinates")
MainTab:CreateButton({
    Name = "üìç L·∫•y & Copy t·ªça ƒë·ªô hi·ªán t·∫°i",
    Callback = function()
        local char = player.Character or player.CharacterAdded:Wait()
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then
            Rayfield:Notify({Title="‚ö†Ô∏è L·ªói", Content="Kh√¥ng t√¨m th·∫•y HRP", Duration=3})
            return
        end
        local coord = string.format("X: %.2f, Y: %.2f, Z: %.2f", hrp.Position.X, hrp.Position.Y, hrp.Position.Z)
        pcall(setclipboard, coord)
        Rayfield:Notify({Title="‚úÖ ƒê√£ copy", Content=coord, Duration=3})
    end
})

-- Event: predefined waypoints and manual Activate button
EventTab:CreateSection("ü™¶ Event - Go Points (SafeMove)")
local GO_POINTS = {
    Vector3.new(-325.63, -6.39, 58.34),  -- Go #1
    Vector3.new(-377.17, -6.98, 183.61), -- Go #2
    Vector3.new(-320.29, -6.99, 171.93)  -- Go #3
}

-- Show path helper (visual only)
local function drawPath(waypoints)
    local parts = {}
    for i = 1, #waypoints-1 do
        local p1, p2 = waypoints[i].Position, waypoints[i+1].Position
        local dist = (p1 - p2).Magnitude
        local mid = (p1 + p2) / 2
        local part = Instance.new("Part")
        part.Anchored = true
        part.CanCollide = false
        part.Material = Enum.Material.Neon
        part.Color = Color3.fromRGB(0,200,120)
        part.Size = Vector3.new(0.2, 0.2, math.max(0.5, dist))
        part.CFrame = CFrame.new(mid, p2) * CFrame.new(0, 0, -dist/2)
        part.Transparency = 0.15
        part.Parent = workspace
        table.insert(parts, part)
    end
    return parts
end
local function clearParts(list)
    for _,p in ipairs(list) do if p and p.Parent then p:Destroy() end end
end

-- SafeMove: pathfinding + MoveTo following
local function SafeMoveTo(destination)
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not humanoid or not hrp then
        Rayfield:Notify({Title="‚ö†Ô∏è L·ªói", Content="Kh√¥ng t√¨m th·∫•y humanoid ho·∫∑c HRP!", Duration=3})
        return false
    end

    local path = PathfindingService:CreatePath({
        AgentRadius = 2, AgentHeight = 5, AgentCanJump = true, AgentCanClimb = true
    })
    path:ComputeAsync(hrp.Position, destination)
    if path.Status ~= Enum.PathStatus.Success then
        Rayfield:Notify({Title="‚ö†Ô∏è L·ªói ƒë∆∞·ªùng ƒëi", Content="Kh√¥ng t√¨m ƒë∆∞·ª£c l·ªô tr√¨nh an to√†n.", Duration=3})
        return false
    end

    local waypoints = path:GetWaypoints()
    local visuals = drawPath(waypoints)

    for _,wp in ipairs(waypoints) do
        if wp.Action == Enum.PathWaypointAction.Jump then
            humanoid.Jump = true
        end

        local reached = false
        humanoid:MoveTo(wp.Position)
        local conn = humanoid.MoveToFinished:Connect(function(success) reached = true end)
        local start = tick()
        while not reached and tick() - start < 12 do
            task.wait(0.15)
        end
        if conn then conn:Disconnect() end
        if not reached then
            clearParts(visuals)
            Rayfield:Notify({Title="‚ö†Ô∏è B·ªã t·∫Øc", Content="Kh√¥ng th·ªÉ ti·∫øp c·∫≠n waypoint, d·ª´ng.", Duration=3})
            return false
        end
    end

    clearParts(visuals)
    return true
end

-- Buttons for manual Go (each will move and then show Activate Tool button)
for i,pt in ipairs(GO_POINTS) do
    EventTab:CreateButton({
        Name = ("ü™¶ Go #%d (ƒê·∫øn ƒëi·ªÉm)"):format(i),
        Callback = function()
            Rayfield:Notify({Title="üß≠ SmartMove", Content=("B·∫Øt ƒë·∫ßu di chuy·ªÉn t·ªõi Go #%d..."):format(i), Duration=3})
            local ok = SafeMoveTo(pt)
            if ok then
                Rayfield:Notify({Title="‚úÖ ƒê√£ ƒë·∫øn", Content=("B·∫°n ƒë√£ t·ªõi Go #%d. Nh·∫•n n√∫t 'K√≠ch ho·∫°t Tool 2' ƒë·ªÉ th·ª±c hi·ªán thao t√°c." ):format(i), Duration=4})
                -- Create a temp button in EventTab to let user manually activate tool
                EventTab:CreateButton({
                    Name = "üîò K√≠ch ho·∫°t Tool 2 (b·∫•m tay ƒë·ªÉ an to√†n)",
                    Callback = function()
                        -- Manual activation: attempt to activate tool in backpack/character
                        local char = player.Character
                        local tool = (char and char:FindFirstChildOfClass("Tool")) or player.Backpack:FindFirstChildOfClass("Tool")
                        if tool and tool.Name then
                            -- try to activate (this runs only when user clicks the Rayfield button)
                            pcall(function()
                                tool.Parent = char
                                if tool.Activate then pcall(function() tool:Activate() end) end
                            end)
                            Rayfield:Notify({Title="üîî Tool", Content="ƒê√£ g·ªçi Activate() tr√™n tool (n·∫øu API cho ph√©p). Vui l√≤ng click chu·ªôt th·ªß c√¥ng n·∫øu c·∫ßn.", Duration=4})
                        else
                            Rayfield:Notify({Title="‚ö†Ô∏è Tool kh√¥ng t√¨m th·∫•y", Content="Kh√¥ng th·∫•y tool trong Backpack/Character. H√£y c·∫ßm Tool r·ªìi b·∫•m.", Duration=4})
                        end
                    end
                })
            end
        end
    })
end

-- Scheduler tab: schedule 14:00 local time to prompt user to run sequence
AutoTab:CreateSection("‚è≤Ô∏è Scheduler (Nh·∫Øc l√∫c 14:00)")
local startHour = 14
local startMin = 0

local autoToggle = AutoTab:CreateToggle({
    Name = "B·∫≠t nh·∫Øc 14:00 (Prompt)",
    Current = false,
    Flag = "SchedulerToggle",
    Callback = function(v) end
})

AutoTab:CreateButton({
    Name = "B·∫Øt ƒë·∫ßu ki·ªÉm tra gi·ªù (ch·∫°y n·ªÅn)",
    Callback = function()
        task.spawn(function()
            Rayfield:Notify({Title="‚è≤Ô∏è Scheduler", Content="Scheduler ƒëang ch·∫°y n·ªÅn. M√¨nh s·∫Ω nh·∫Øc b·∫°n l√∫c 14:00.", Duration=4})
            while true do
                task.wait(30) -- check every 30s
                local t = os.date("*t") -- system local time
                if t.hour == startHour and t.min == startMin then
                    -- At exactly 14:00 prompt user
                    Rayfield:Notify({Title="‚è∞ SDVT Event", Content="ƒê√£ ƒë·∫øn 14:00 ‚Äî b·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu chuy·∫øn ƒëi t·ª± ƒë·ªông (MoveTo sequence)?", Duration=6})
                    -- Create confirm buttons
                    local confirmed = false
                    local promptTab = Window:CreateTab("Confirm", 4483362458)
                    promptTab:CreateButton({
                        Name = "‚úÖ B·∫Øt ƒë·∫ßu di chuy·ªÉn (t·ª± MoveTo c√°c ƒëi·ªÉm)",
                        Callback = function()
                            confirmed = true
                            Rayfield:Notify({Title="üöÄ B·∫Øt ƒë·∫ßu", Content="Script s·∫Ω di chuy·ªÉn t·ªõi c√°c ƒëi·ªÉm tu·∫ßn t·ª± (MoveTo).", Duration=3})
                            -- sequential move: Go1->Go2->Go3
                            for i,pt in ipairs(GO_POINTS) do
                                local ok = SafeMoveTo(pt)
                                if not ok then
                                    Rayfield:Notify({Title="‚ö†Ô∏è D·ª´ng", Content="ƒê√£ g·∫∑p l·ªói khi di chuy·ªÉn. H·ªßy sequence.", Duration=4})
                                    break
                                end
                                Rayfield:Notify({Title="‚úÖ ƒê·∫øn ƒëi·ªÉm", Content=("ƒê√£ ƒë·∫øn ƒëi·ªÉm %d ‚Äî vui l√≤ng k√≠ch ho·∫°t tool th·ªß c√¥ng n·∫øu c·∫ßn."):format(i), Duration=4})
                                -- wait 18s pause as you requested (but no auto clicking)
                                task.wait(18)
                            end
                            -- cleanup prompt tab
                            pcall(function() Window:RemoveTab(promptTab) end)
                        end
                    })
                    promptTab:CreateButton({
                        Name = "‚ùå H·ªßy",
                        Callback = function()
                            confirmed = false
                            pcall(function() Window:RemoveTab(promptTab) end)
                            Rayfield:Notify({Title="‚ùå H·ªßy", Content="B·∫°n ƒë√£ h·ªßy sequence.", Duration=3})
                        end
                    })
                    -- wait out this minute so it won't re-trigger instantly
                    task.wait(61)
                end
            end
        end)
    end
})

-- Final notify
Rayfield:Notify({Title="üåå SDVT SAB Ready", Content="Safe Scheduler loaded. Auto-tool activation & auto-clicking are disabled for safety.", Duration=6})
